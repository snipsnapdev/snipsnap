{
  "nuxt-linkto": {
    "prefix": ["nuxt linkto"],
    "body": ["<nuxt-link to=\"$1\">$2</nuxt-link>$0"],
    "scope": "vue-html"
  },
  "nuxt-namedlinkto": {
    "prefix": ["nuxt namedlinkto"],
    "body": [
      "<nuxt-link :to=\"{\t${1:key}: '${2:value}', ${3:key}: {\t${4:key}: '${5:value}'\t}\t}\">$6</nuxt-link>$0"
    ],
    "scope": "vue-html"
  },
  "nuxt-view": {
    "prefix": ["nuxt view"],
    "body": ["<nuxt>$1</nuxt>$0"],
    "scope": "vue-html"
  },
  "nuxt-namedview": {
    "prefix": ["nuxt namedview"],
    "body": ["<nuxt name=\"$1\">$2</nuxt>$0"],
    "scope": "vue-html"
  },
  "nuxt-child": {
    "prefix": ["nuxt child"],
    "body": ["<nuxt-child $1/>$0"],
    "scope": "vue-html"
  },
  "nuxt-async-data": {
    "prefix": ["nuxt asyncdata"],
    "body": [
      "asyncData ({isDev, route, store, env, params, query, req, res, redirect, error}) {",
      "\treturn { ${1:data} }",
      "\n},"
    ],
    "description": "Fetch and pre-render data on the server without using a store. The result from asyncData will be merged with data",
    "scope": "vue"
  },
  "nuxt-head": {
    "prefix": ["nuxt head"],
    "body": [
      "head () {",
      "\treturn {",
      "\t\ttitle: '${1:title}',",
      "\t\tmeta: [",
      "\t\t\t{ hid: '${2:description}', name: '${3:description}', content: '${4:custom description}' }",
      "\t\t]",
      "\t}",
      "},"
    ],
    "description": "Use the head method to set the HTML Head tags for the current page",
    "scope": "vue"
  },
  "nuxt-middleware": {
    "prefix": ["nuxt middleware"],
    "body": ["middleware ({ store, redirect }) {", "\t${1:data}", "},"],
    "description": "Set the middleware for a specific page of the application.",
    "scope": "vue"
  },
  "nuxt-validate": {
    "prefix": ["nuxt validate"],
    "body": ["validate({ params, query, store }) {", "\t${1:data}", "},"],
    "description": "Validate is called every time before navigating to a new route.",
    "scope": "vue"
  },
  "nuxt-watch-query": {
    "prefix": ["nuxt watchquery"],
    "body": ["watchQuery (newQuery, oldQuery) {", "\t${1:data}", "},"],
    "description": "Use the watchQuery key to set up a watcher for query strings.",
    "scope": "vue"
  },
  "nuxt-serverinit": {
    "prefix": ["nuxt serverinit"],
    "body": ["nuxtServerInit ({ commit }, { req }) {", "\t${1:data}", "}"],
    "description": "In universal mode, useful to fetch data on the server and give directly to the client-side.",
    "scope": "vue"
  }
}
